// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using officeNow_api.Models;

namespace officeNow_api.Migrations
{
    [DbContext(typeof(OfficeNowContext))]
    [Migration("20211029083647_OfficeNowDB")]
    partial class OfficeNowDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("officeNow_api.Models.BookingLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BookedDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkStationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("WorkStationId")
                        .IsUnique();

                    b.ToTable("BookingLog");
                });

            modelBuilder.Entity("officeNow_api.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyLocation");
                });

            modelBuilder.Entity("officeNow_api.Models.Tags", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("officeNow_api.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserLocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserLocationId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("officeNow_api.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("officeNow_api.Models.UserTags", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTag");
                });

            modelBuilder.Entity("officeNow_api.Models.WorkStation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompanyLocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeatNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyLocationId");

                    b.ToTable("WorkStation");
                });

            modelBuilder.Entity("officeNow_api.Models.WorkStationTags", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkStationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("WorkStationId");

                    b.ToTable("WorkStationTag");
                });

            modelBuilder.Entity("officeNow_api.Models.BookingLog", b =>
                {
                    b.HasOne("officeNow_api.Models.User", "BookedUser")
                        .WithOne()
                        .HasForeignKey("officeNow_api.Models.BookingLog", "UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("officeNow_api.Models.WorkStation", "WorkStation")
                        .WithOne()
                        .HasForeignKey("officeNow_api.Models.BookingLog", "WorkStationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("BookedUser");

                    b.Navigation("WorkStation");
                });

            modelBuilder.Entity("officeNow_api.Models.User", b =>
                {
                    b.HasOne("officeNow_api.Models.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("officeNow_api.Models.Location", "UserLocation")
                        .WithMany()
                        .HasForeignKey("UserLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLocation");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("officeNow_api.Models.UserTags", b =>
                {
                    b.HasOne("officeNow_api.Models.Tags", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.HasOne("officeNow_api.Models.User", null)
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("officeNow_api.Models.WorkStation", b =>
                {
                    b.HasOne("officeNow_api.Models.Location", "CompanyLocation")
                        .WithMany()
                        .HasForeignKey("CompanyLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyLocation");
                });

            modelBuilder.Entity("officeNow_api.Models.WorkStationTags", b =>
                {
                    b.HasOne("officeNow_api.Models.Tags", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.HasOne("officeNow_api.Models.WorkStation", null)
                        .WithMany("Tags")
                        .HasForeignKey("WorkStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("officeNow_api.Models.User", b =>
                {
                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("officeNow_api.Models.WorkStation", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
